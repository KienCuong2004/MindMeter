name: Deploy to Production

# Temporarily disabled - use simple-test.yml instead
# on:
#   push:
#     branches: [ master ]
#     tags:
#       - 'v*'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_ENVIRONMENT: production
    
    - name: Build Backend
      working-directory: ./backend
      run: mvn clean package -DskipTests
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r frontend/build deploy/frontend
        cp backend/target/*.jar deploy/backend.jar
        cp -r backend/src/main/resources deploy/config
        echo "Deployment package created successfully"
    
    - name: Deploy to server
      if: success()
      run: |
        echo "Deployment would happen here"
        echo "Backend JAR: deploy/backend.jar"
        echo "Frontend build: deploy/frontend/"
        echo "Configuration: deploy/config/"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment successful"
        else
          echo "Deployment failed"
        fi

  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
    
    - name: Build Backend
      working-directory: ./backend
      run: mvn clean package -DskipTests
    
    - name: Create release package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p release/mindmeter-$VERSION
        cp -r frontend/build release/mindmeter-$VERSION/frontend
        cp backend/target/*.jar release/mindmeter-$VERSION/
        cp README.md release/mindmeter-$VERSION/
        cp LICENSE release/mindmeter-$VERSION/
        cd release
        tar -czf mindmeter-$VERSION.tar.gz mindmeter-$VERSION/
        zip -r mindmeter-$VERSION.zip mindmeter-$VERSION/
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## MindMeter Release ${{ github.ref }}
          
          ### What's New
          - Latest frontend build
          - Latest backend JAR
          - Updated documentation
          
          ### Installation
          1. Extract the release package
          2. Configure your environment variables
          3. Run the backend JAR
          4. Serve the frontend build files
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/mindmeter-${{ github.ref_name }}.tar.gz
        asset_name: mindmeter-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Assets (ZIP)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/mindmeter-${{ github.ref_name }}.zip
        asset_name: mindmeter-${{ github.ref_name }}.zip
        asset_content_type: application/zip
