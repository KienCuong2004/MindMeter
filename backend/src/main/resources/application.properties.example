# MindMeter Backend Configuration Template
# Copy this file to application.properties and fill in your actual values

spring.application.name=MindMeter Backend

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/mindmeter?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=your_db_username
spring.datasource.password=your_strong_db_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

# HikariCP Connection Pool Configuration
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.initialization-fail-timeout=1
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.pool-name=MindMeterHikariCP

# HikariCP Performance Tuning
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
spring.datasource.hikari.data-source-properties.useLocalSessionState=true
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=true
spring.datasource.hikari.data-source-properties.cacheServerConfiguration=true
spring.datasource.hikari.data-source-properties.elideSetAutoCommits=true
spring.datasource.hikari.data-source-properties.maintainTimeStats=false

# JWT Configuration
jwt.secret=your_jwt_secret_key_here_minimum_256_bits
jwt.expiration=86400000

# Email Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your_email@gmail.com
spring.mail.password=your_app_password_here
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Frontend URL
app.frontend-url=http://localhost:3000/auth/callback

# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=your_google_client_id
spring.security.oauth2.client.registration.google.client-secret=your_google_client_secret
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google

# Feedback and Contact
feedback.receiver=your_feedback_email@gmail.com
contact.receiver.email=your_contact_email@gmail.com

# Stripe Configuration
stripe.api.key.test=sk_test_your_stripe_test_key
stripe.public.key.test=pk_test_your_stripe_public_test_key
stripe.webhook.secret.test=whsec_your_stripe_webhook_secret

# Stripe Mode: test | prod
stripe.mode=test

# Fallback keys (for backward compatibility)
stripe.api.key=${stripe.api.key.${stripe.mode}}
stripe.public.key=${stripe.public.key.${stripe.mode}}
stripe.webhook.secret=${stripe.webhook.secret.${stripe.mode}}

# App URLs
app.base.url=http://localhost:3000
app.backend.url=http://localhost:8080

# OpenAI API Key
OPENAI_API_KEY=sk-proj-your_openai_api_key_here

# Java System Properties
java.net.preferIPv4Stack=true
spring.main.allow-bean-definition-overriding=true

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.enabled=true

# Connection Pool Monitoring & Health Checks
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.health.db.enabled=true
management.health.hikari.enabled=true

# Metrics Configuration
management.metrics.export.prometheus.enabled=true
management.metrics.tags.application=mindmeter
management.metrics.tags.environment=${SPRING_PROFILES_ACTIVE:dev}

# Logging for Connection Pool (set to INFO for production)
logging.level.com.zaxxer.hikari=INFO
logging.level.com.zaxxer.hikari.HikariConfig=INFO
logging.level.com.zaxxer.hikari.pool.HikariPool=INFO

# Cache Configuration
cache.enabled=true
cache.type=local
cache.local.max-size=1000
cache.local.expire-after-write=3600
cache.redis.default-ttl=1800

# Redis Configuration (Optional - for distributed caching)
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.database=0
spring.data.redis.timeout=2000ms